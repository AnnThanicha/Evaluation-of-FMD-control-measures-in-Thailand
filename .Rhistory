# add random number of edge
raw_vertices_farmeredge$edge_number <- sample(c(1,2,3,4), nrow(raw_vertices_farmeredge), replace = TRUE, prob= c(44/63, 16/63, 2/63, 1/63))
# arrange the ID so farm with 1 edges start first
raw_vertices_farmeredge <- raw_vertices_farmeredge[order(raw_vertices_farmeredge$edge_number),]
# create blank vector
sim_edge <-c()
for(i in 1:length(raw_vertices_farmeredge$ID)){
# if there are still traders without the link to farmers, it will be prioritized to link with farmer first
# to gaurantee that all trader have at least one link to the farmers
# after all trader got at least one link it will be
if (sum(raw_vertices_trader$initialedge==1)>0){add <- sample(raw_vertices_trader$ID[raw_vertices_trader$initialedge==1], raw_vertices_farmeredge$edge_number[i], replace = FALSE)
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
else
{ #random edge with preferential attachment
add <- sample(raw_vertices_trader$ID, raw_vertices_farmeredge$edge_number[i], replace = FALSE, prob= (raw_vertices_trader$initialedge/sum(raw_vertices_trader$initialedge)))
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
# keep add to sim_edge vecyor
sim_edge <- c(sim_edge,add)
}
# Now we got trader name, we need to make a dataframe from this with farmers with edge
sim_edge <- data.frame(from = rep(raw_vertices_farmeredge$ID, raw_vertices_farmeredge$edge_number), to = sim_edge)
# group the farm with the same trader
list_trade <- split(sim_edge, as.factor(sim_edge$to))
list_trade  <- lapply(list_trade, "[[", 1)
# change to numeric
list_trade  <- lapply(list_trade, as.numeric, 1)
#First create blank trade matrix
component_matrix<-matrix(0, nrow=nrow(Mod_distance), ncol=ncol(Mod_distance))
# the farms from same component is 1 , while farms that are not in the same component is 0
for(i in 1:length(list_trade)){
component_matrix[list_trade[[i]],list_trade[[i]]]<-1   }
# diagonal to 0
diag(component_matrix)<-0
return(component_matrix)
}
sim_trade_pref(raw_vertices = raw_vertices, prob_isolated = 0.5)
raw_vertices
raw_vertices$ID <-raw_vertices$node
sim_trade_pref <- function(raw_vertices, prob_isolated) {
raw_vertices$isolated_status<-0
raw_vertices$isolated_status[raw_vertices$status=="farm"] <-rbinom(length(raw_vertices$isolated_status[raw_vertices$status=="farm"]), size = 1, prob= prob_isolated)
# trader is not isolated
raw_vertices$isolated_status[raw_vertices$status=="trader"] <-1
table(raw_vertices$isolated_status[raw_vertices$status=="farm"])
raw_vertices_trader<-raw_vertices[raw_vertices$status=="trader",]#node trader
raw_vertices_farmer<-raw_vertices[raw_vertices$status=="farm",]#node farmer
raw_vertices_farmeredge <-raw_vertices[raw_vertices$isolated_status==1 & raw_vertices$status=="farm",]
# set initail edge to one for trader
raw_vertices_trader$initialedge <- 1
# add random number of edge
raw_vertices_farmeredge$edge_number <- sample(c(1,2,3,4), nrow(raw_vertices_farmeredge), replace = TRUE, prob= c(44/63, 16/63, 2/63, 1/63))
# arrange the ID so farm with 1 edges start first
raw_vertices_farmeredge <- raw_vertices_farmeredge[order(raw_vertices_farmeredge$edge_number),]
# create blank vector
sim_edge <-c()
for(i in 1:length(raw_vertices_farmeredge$ID)){
# if there are still traders without the link to farmers, it will be prioritized to link with farmer first
# to gaurantee that all trader have at least one link to the farmers
# after all trader got at least one link it will be
if (sum(raw_vertices_trader$initialedge==1)>0){add <- sample(raw_vertices_trader$ID[raw_vertices_trader$initialedge==1], raw_vertices_farmeredge$edge_number[i], replace = FALSE)
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
else
{ #random edge with preferential attachment
add <- sample(raw_vertices_trader$ID, raw_vertices_farmeredge$edge_number[i], replace = FALSE, prob= (raw_vertices_trader$initialedge/sum(raw_vertices_trader$initialedge)))
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
# keep add to sim_edge vecyor
sim_edge <- c(sim_edge,add)
}
# Now we got trader name, we need to make a dataframe from this with farmers with edge
sim_edge <- data.frame(from = rep(raw_vertices_farmeredge$ID, raw_vertices_farmeredge$edge_number), to = sim_edge)
# group the farm with the same trader
list_trade <- split(sim_edge, as.factor(sim_edge$to))
list_trade  <- lapply(list_trade, "[[", 1)
# change to numeric
list_trade  <- lapply(list_trade, as.numeric, 1)
#First create blank trade matrix
component_matrix<-matrix(0, nrow=nrow(Mod_distance), ncol=ncol(Mod_distance))
# the farms from same component is 1 , while farms that are not in the same component is 0
for(i in 1:length(list_trade)){
component_matrix[list_trade[[i]],list_trade[[i]]]<-1   }
# diagonal to 0
diag(component_matrix)<-0
return(component_matrix)
}
sim_trade_pref(raw_vertices = raw_vertices, prob_isolated = 0.5)
raw_vertices_farmer
raw_vertices$isolated_status<-0
raw_vertices$isolated_status[raw_vertices$status=="farm"] <-rbinom(length(raw_vertices$isolated_status[raw_vertices$status=="farm"]), size = 1, prob= prob_isolated)
# trader is not isolated
raw_vertices$isolated_status[raw_vertices$status=="trader"] <-1
table(raw_vertices$isolated_status[raw_vertices$status=="farm"])
raw_vertices_trader<-raw_vertices[raw_vertices$status=="trader",]#node trader
raw_vertices_farmer<-raw_vertices[raw_vertices$status=="farm",]#node farmer
raw_vertices_farmeredge <-raw_vertices[raw_vertices$isolated_status==1 & raw_vertices$status=="farm",]
# set initail edge to one for trader
raw_vertices_trader$initialedge <- 1
# add random number of edge
raw_vertices_farmeredge$edge_number <- sample(c(1,2,3,4), nrow(raw_vertices_farmeredge), replace = TRUE, prob= c(44/63, 16/63, 2/63, 1/63))
# arrange the ID so farm with 1 edges start first
raw_vertices_farmeredge <- raw_vertices_farmeredge[order(raw_vertices_farmeredge$edge_number),]
# create blank vector
sim_edge <-c()
for(i in 1:length(raw_vertices_farmeredge$ID)){
# if there are still traders without the link to farmers, it will be prioritized to link with farmer first
# to gaurantee that all trader have at least one link to the farmers
# after all trader got at least one link it will be
if (sum(raw_vertices_trader$initialedge==1)>0){add <- sample(raw_vertices_trader$ID[raw_vertices_trader$initialedge==1], raw_vertices_farmeredge$edge_number[i], replace = FALSE)
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
else
{ #random edge with preferential attachment
add <- sample(raw_vertices_trader$ID, raw_vertices_farmeredge$edge_number[i], replace = FALSE, prob= (raw_vertices_trader$initialedge/sum(raw_vertices_trader$initialedge)))
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
# keep add to sim_edge vecyor
sim_edge <- c(sim_edge,add)
}
sim_trade_pref <- function(raw_vertices, prob_isolated) {
raw_vertices$isolated_status<-0
raw_vertices$isolated_status[raw_vertices$status=="farm"] <-rbinom(length(raw_vertices$isolated_status[raw_vertices$status=="farm"]), size = 1, prob= prob_isolated)
# trader is not isolated
raw_vertices$isolated_status[raw_vertices$status=="trader"] <-1
table(raw_vertices$isolated_status[raw_vertices$status=="farm"])
raw_vertices_trader<-raw_vertices[raw_vertices$status=="trader",]#node trader
raw_vertices_farmer<-raw_vertices[raw_vertices$status=="farm",]#node farmer
raw_vertices_farmeredge <-raw_vertices[raw_vertices$isolated_status==1 & raw_vertices$status=="farm",]
# set initail edge to one for trader
raw_vertices_trader$initialedge <- 1
# add random number of edge
raw_vertices_farmeredge$edge_number <- sample(c(1,2,3,4), nrow(raw_vertices_farmeredge), replace = TRUE, prob= c(44/63, 16/63, 2/63, 1/63))
# arrange the ID so farm with 1 edges start first
raw_vertices_farmeredge <- raw_vertices_farmeredge[order(raw_vertices_farmeredge$edge_number),]
# create blank vector
sim_edge <-c()
for(i in 1:length(raw_vertices_farmeredge$ID)){
# if there are still traders without the link to farmers, it will be prioritized to link with farmer first
# to gaurantee that all trader have at least one link to the farmers
# after all trader got at least one link it will be
if (sum(raw_vertices_trader$initialedge==1)>0){add <- sample(raw_vertices_trader$ID[raw_vertices_trader$initialedge==1], raw_vertices_farmeredge$edge_number[i], replace = FALSE)
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
else
{ #random edge with preferential attachment
add <- sample(raw_vertices_trader$ID, raw_vertices_farmeredge$edge_number[i], replace = FALSE, prob= (raw_vertices_trader$initialedge/sum(raw_vertices_trader$initialedge)))
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
# keep add to sim_edge vecyor
sim_edge <- c(sim_edge,add)
}
# Now we got trader name, we need to make a dataframe from this with farmers with edge
sim_edge <- data.frame(from = rep(raw_vertices_farmeredge$ID, raw_vertices_farmeredge$edge_number), to = sim_edge)
# group the farm with the same trader
list_trade <- split(sim_edge, as.factor(sim_edge$to))
list_trade  <- lapply(list_trade, "[[", 1)
# change to numeric
list_trade  <- lapply(list_trade, as.numeric, 1)
#First create blank trade matrix
component_matrix<-matrix(0, nrow=nrow(502), ncol=ncol(502))
# the farms from same component is 1 , while farms that are not in the same component is 0
for(i in 1:length(list_trade)){
component_matrix[list_trade[[i]],list_trade[[i]]]<-1   }
# diagonal to 0
diag(component_matrix)<-0
return(component_matrix)
}
sim_trade_pref(raw_vertices = raw_vertices, prob_isolated = 0.5)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~----------------------------------------------------
## import data -----------------
# the data contain node of
raw_vertices <- readRDS("raw_vertices.rds")
setwd("C:/Users/Chanc004/OneDrive - Wageningen University & Research/Phd thesis/R code/Git FMD model Thailand")
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~----------------------------------------------------
## import data -----------------
# the data contain node of
raw_vertices <- readRDS("raw_vertices.rds")
raw_vertices$isolated_status<-0
raw_vertices$isolated_status[raw_vertices$status=="farm"] <-rbinom(length(raw_vertices$isolated_status[raw_vertices$status=="farm"]), size = 1, prob= prob_isolated)
# trader is not isolated
raw_vertices$isolated_status[raw_vertices$status=="trader"] <-1
prob_isolated = 0.5
raw_vertices$isolated_status<-0
raw_vertices$isolated_status[raw_vertices$status=="farm"] <-rbinom(length(raw_vertices$isolated_status[raw_vertices$status=="farm"]), size = 1, prob= prob_isolated)
# trader is not isolated
raw_vertices$isolated_status[raw_vertices$status=="trader"] <-1
table(raw_vertices$isolated_status[raw_vertices$status=="farm"])
raw_vertices_trader<-raw_vertices[raw_vertices$status=="trader",]#node trader
raw_vertices_farmer<-raw_vertices[raw_vertices$status=="farm",]#node farmer
raw_vertices_farmeredge <-raw_vertices[raw_vertices$isolated_status==1 & raw_vertices$status=="farm",]
# set initail edge to one for trader
raw_vertices_trader$initialedge <- 1
# add random number of edge
raw_vertices_farmeredge$edge_number <- sample(c(1,2,3,4), nrow(raw_vertices_farmeredge), replace = TRUE, prob= c(44/63, 16/63, 2/63, 1/63))
# arrange the ID so farm with 1 edges start first
raw_vertices_farmeredge <- raw_vertices_farmeredge[order(raw_vertices_farmeredge$edge_number),]
# create blank vector
sim_edge <-c()
for(i in 1:length(raw_vertices_farmeredge$ID)){
# if there are still traders without the link to farmers, it will be prioritized to link with farmer first
# to gaurantee that all trader have at least one link to the farmers
# after all trader got at least one link it will be
if (sum(raw_vertices_trader$initialedge==1)>0){add <- sample(raw_vertices_trader$ID[raw_vertices_trader$initialedge==1], raw_vertices_farmeredge$edge_number[i], replace = FALSE)
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
else
{ #random edge with preferential attachment
add <- sample(raw_vertices_trader$ID, raw_vertices_farmeredge$edge_number[i], replace = FALSE, prob= (raw_vertices_trader$initialedge/sum(raw_vertices_trader$initialedge)))
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
# keep add to sim_edge vecyor
sim_edge <- c(sim_edge,add)
}
raw_vertices$ID <- raw_vertices$node
saveRDS(raw_vertices)
saveRDS("raw_vertices.rds")
raw_vertices$isolated_status<-0
raw_vertices$isolated_status[raw_vertices$status=="farm"] <-rbinom(length(raw_vertices$isolated_status[raw_vertices$status=="farm"]), size = 1, prob= prob_isolated)
# trader is not isolated
raw_vertices$isolated_status[raw_vertices$status=="trader"] <-1
table(raw_vertices$isolated_status[raw_vertices$status=="farm"])
raw_vertices_trader<-raw_vertices[raw_vertices$status=="trader",]#node trader
raw_vertices_farmer<-raw_vertices[raw_vertices$status=="farm",]#node farmer
raw_vertices_farmeredge <-raw_vertices[raw_vertices$isolated_status==1 & raw_vertices$status=="farm",]
# set initail edge to one for trader
raw_vertices_trader$initialedge <- 1
# add random number of edge
raw_vertices_farmeredge$edge_number <- sample(c(1,2,3,4), nrow(raw_vertices_farmeredge), replace = TRUE, prob= c(44/63, 16/63, 2/63, 1/63))
# arrange the ID so farm with 1 edges start first
raw_vertices_farmeredge <- raw_vertices_farmeredge[order(raw_vertices_farmeredge$edge_number),]
# create blank vector
sim_edge <-c()
for(i in 1:length(raw_vertices_farmeredge$ID)){
# if there are still traders without the link to farmers, it will be prioritized to link with farmer first
# to gaurantee that all trader have at least one link to the farmers
# after all trader got at least one link it will be
if (sum(raw_vertices_trader$initialedge==1)>0){add <- sample(raw_vertices_trader$ID[raw_vertices_trader$initialedge==1], raw_vertices_farmeredge$edge_number[i], replace = FALSE)
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
else
{ #random edge with preferential attachment
add <- sample(raw_vertices_trader$ID, raw_vertices_farmeredge$edge_number[i], replace = FALSE, prob= (raw_vertices_trader$initialedge/sum(raw_vertices_trader$initialedge)))
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
# keep add to sim_edge vecyor
sim_edge <- c(sim_edge,add)
}
# Now we got trader name, we need to make a dataframe from this with farmers with edge
sim_edge <- data.frame(from = rep(raw_vertices_farmeredge$ID, raw_vertices_farmeredge$edge_number), to = sim_edge)
# group the farm with the same trader
list_trade <- split(sim_edge, as.factor(sim_edge$to))
list_trade  <- lapply(list_trade, "[[", 1)
# change to numeric
list_trade  <- lapply(list_trade, as.numeric, 1)
#First create blank trade matrix
component_matrix<-matrix(0, nrow=nrow(502), ncol=ncol(502))
sim_edge
# Now we got trader name, we need to make a dataframe from this with farmers with edge
sim_edge <- data.frame(from = rep(raw_vertices_farmeredge$ID, raw_vertices_farmeredge$edge_number), to = sim_edge)
# group the farm with the same trader
list_trade <- split(sim_edge, as.factor(sim_edge$to))
list_trade  <- lapply(list_trade, "[[", 1)
# change to numeric
list_trade  <- lapply(list_trade, as.numeric, 1)
#First create blank trade matrix
component_matrix<-matrix(0, nrow=502, ncol=502)
# the farms from same component is 1 , while farms that are not in the same component is 0
for(i in 1:length(list_trade)){
component_matrix[list_trade[[i]],list_trade[[i]]]<-1   }
# diagonal to 0
diag(component_matrix)<-0
component_matrix
## To creat the trade matrix for simulation model ------------------
sim_edge <- data.frame(from = rep(raw_vertices_farmeredge$ID, raw_vertices_farmeredge$edge_number), to = sim_edge)
sim_edge
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--------------------------------------------------
rm(sim_edge)
sim_trade_pref <- function(raw_vertices, prob_isolated) {
raw_vertices$isolated_status<-0
raw_vertices$isolated_status[raw_vertices$status=="farm"] <-rbinom(length(raw_vertices$isolated_status[raw_vertices$status=="farm"]), size = 1, prob= prob_isolated)
# trader is not isolated
raw_vertices$isolated_status[raw_vertices$status=="trader"] <-1
table(raw_vertices$isolated_status[raw_vertices$status=="farm"])
raw_vertices_trader<-raw_vertices[raw_vertices$status=="trader",]#node trader
raw_vertices_farmer<-raw_vertices[raw_vertices$status=="farm",]#node farmer
raw_vertices_farmeredge <-raw_vertices[raw_vertices$isolated_status==1 & raw_vertices$status=="farm",]
# set initail edge to one for trader
raw_vertices_trader$initialedge <- 1
# add random number of edge
raw_vertices_farmeredge$edge_number <- sample(c(1,2,3,4), nrow(raw_vertices_farmeredge), replace = TRUE, prob= c(44/63, 16/63, 2/63, 1/63))
# arrange the ID so farm with 1 edges start first
raw_vertices_farmeredge <- raw_vertices_farmeredge[order(raw_vertices_farmeredge$edge_number),]
# create blank vector
sim_edge <-c()
for(i in 1:length(raw_vertices_farmeredge$ID)){
# if there are still traders without the link to farmers, it will be prioritized to link with farmer first
# to gaurantee that all trader have at least one link to the farmers
# after all trader got at least one link it will be
if (sum(raw_vertices_trader$initialedge==1)>0){add <- sample(raw_vertices_trader$ID[raw_vertices_trader$initialedge==1], raw_vertices_farmeredge$edge_number[i], replace = FALSE)
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
else
{ #random edge with preferential attachment
add <- sample(raw_vertices_trader$ID, raw_vertices_farmeredge$edge_number[i], replace = FALSE, prob= (raw_vertices_trader$initialedge/sum(raw_vertices_trader$initialedge)))
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
# keep add to sim_edge vecyor
sim_edge <- c(sim_edge,add)
return(sim_edge)
}
# keep add to sim_edge vecyor
sim_edge <- c(sim_edge,add)
}
data.frame(from = rep(raw_vertices_farmeredge$ID, raw_vertices_farmeredge$edge_number), to = sim_edge)
# To create the trade matrix that can be used with simulation model ----------
# Now we got trader name, we need to make a dataframe from this with farmers with edge
sim_edge <- data.frame(from = rep(raw_vertices_farmeredge$ID, raw_vertices_farmeredge$edge_number), to = sim_edge)
sim_trade_pref <- function(raw_vertices, prob_isolated) {
raw_vertices$isolated_status<-0
raw_vertices$isolated_status[raw_vertices$status=="farm"] <-rbinom(length(raw_vertices$isolated_status[raw_vertices$status=="farm"]), size = 1, prob= prob_isolated)
# trader is not isolated
raw_vertices$isolated_status[raw_vertices$status=="trader"] <-1
table(raw_vertices$isolated_status[raw_vertices$status=="farm"])
raw_vertices_trader<-raw_vertices[raw_vertices$status=="trader",]#node trader
raw_vertices_farmer<-raw_vertices[raw_vertices$status=="farm",]#node farmer
raw_vertices_farmeredge <-raw_vertices[raw_vertices$isolated_status==1 & raw_vertices$status=="farm",]
# set initail edge to one for trader
raw_vertices_trader$initialedge <- 1
# add random number of edge
raw_vertices_farmeredge$edge_number <- sample(c(1,2,3,4), nrow(raw_vertices_farmeredge), replace = TRUE, prob= c(44/63, 16/63, 2/63, 1/63))
# arrange the ID so farm with 1 edges start first
raw_vertices_farmeredge <- raw_vertices_farmeredge[order(raw_vertices_farmeredge$edge_number),]
# create blank vector
sim_edge <-c()
for(i in 1:length(raw_vertices_farmeredge$ID)){
# if there are still traders without the link to farmers, it will be prioritized to link with farmer first
# to gaurantee that all trader have at least one link to the farmers
# after all trader got at least one link it will be
if (sum(raw_vertices_trader$initialedge==1)>0){add <- sample(raw_vertices_trader$ID[raw_vertices_trader$initialedge==1], raw_vertices_farmeredge$edge_number[i], replace = FALSE)
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
else
{ #random edge with preferential attachment
add <- sample(raw_vertices_trader$ID, raw_vertices_farmeredge$edge_number[i], replace = FALSE, prob= (raw_vertices_trader$initialedge/sum(raw_vertices_trader$initialedge)))
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
# keep add to sim_edge vecyor
sim_edge <- c(sim_edge,add)
}
# Now we got trader name, we need to make a dataframe from this with farmers with edge
sim_edge <- data.frame(from = rep(raw_vertices_farmeredge$ID, raw_vertices_farmeredge$edge_number), to = sim_edge)
# group the farm with the same trader
list_trade <- split(sim_edge, as.factor(sim_edge$to))
list_trade  <- lapply(list_trade, "[[", 1)
# change to numeric
list_trade  <- lapply(list_trade, as.numeric, 1)
#First create blank trade matrix
component_matrix<-matrix(0, nrow=nrow(Mod_distance), ncol=ncol(Mod_distance))
# the farms from same component is 1 , while farms that are not in the same component is 0
for(i in 1:length(list_trade)){
component_matrix[list_trade[[i]],list_trade[[i]]]<-1   }
# diagonal to 0
diag(component_matrix)<-0
return(component_matrix)
}
##~~~~~~~~~~~~~~~~~~~~~~-~~~~~~~~~~~~~~~~~~~~~~~~~---------------------------------
sim_trade_pref (raw_vertices = raw_vertices, prob_isolated = 0.5)
sim_trade_pref <- function(raw_vertices, prob_isolated) {
raw_vertices$isolated_status<-0
raw_vertices$isolated_status[raw_vertices$status=="farm"] <-rbinom(length(raw_vertices$isolated_status[raw_vertices$status=="farm"]), size = 1, prob= prob_isolated)
# trader is not isolated
raw_vertices$isolated_status[raw_vertices$status=="trader"] <-1
table(raw_vertices$isolated_status[raw_vertices$status=="farm"])
raw_vertices_trader<-raw_vertices[raw_vertices$status=="trader",]#node trader
raw_vertices_farmer<-raw_vertices[raw_vertices$status=="farm",]#node farmer
raw_vertices_farmeredge <-raw_vertices[raw_vertices$isolated_status==1 & raw_vertices$status=="farm",]
# set initail edge to one for trader
raw_vertices_trader$initialedge <- 1
# add random number of edge
raw_vertices_farmeredge$edge_number <- sample(c(1,2,3,4), nrow(raw_vertices_farmeredge), replace = TRUE, prob= c(44/63, 16/63, 2/63, 1/63))
# arrange the ID so farm with 1 edges start first
raw_vertices_farmeredge <- raw_vertices_farmeredge[order(raw_vertices_farmeredge$edge_number),]
# create blank vector
sim_edge <-c()
for(i in 1:length(raw_vertices_farmeredge$ID)){
# if there are still traders without the link to farmers, it will be prioritized to link with farmer first
# to gaurantee that all trader have at least one link to the farmers
# after all trader got at least one link it will be
if (sum(raw_vertices_trader$initialedge==1)>0){add <- sample(raw_vertices_trader$ID[raw_vertices_trader$initialedge==1], raw_vertices_farmeredge$edge_number[i], replace = FALSE)
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
else
{ #random edge with preferential attachment
add <- sample(raw_vertices_trader$ID, raw_vertices_farmeredge$edge_number[i], replace = FALSE, prob= (raw_vertices_trader$initialedge/sum(raw_vertices_trader$initialedge)))
#update edge for selected trader
raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add] <-raw_vertices_trader$initialedge[raw_vertices_trader$ID %in% add]+1
}
# keep add to sim_edge vecyor
sim_edge <- c(sim_edge,add)
}
# Now we got trader name, we need to make a dataframe from this with farmers with edge
sim_edge <- data.frame(from = rep(raw_vertices_farmeredge$ID, raw_vertices_farmeredge$edge_number), to = sim_edge)
# group the farm with the same trader
list_trade <- split(sim_edge, as.factor(sim_edge$to))
list_trade  <- lapply(list_trade, "[[", 1)
# change to numeric
list_trade  <- lapply(list_trade, as.numeric, 1)
#First create blank trade matrix
component_matrix<-matrix(0, nrow=502, ncol=502)
# the farms from same component is 1 , while farms that are not in the same component is 0
for(i in 1:length(list_trade)){
component_matrix[list_trade[[i]],list_trade[[i]]]<-1   }
# diagonal to 0
diag(component_matrix)<-0
return(component_matrix)
}
##~~~~~~~~~~~~~~~~~~~~~~-~~~~~~~~~~~~~~~~~~~~~~~~~---------------------------------
sim_trade_pref (raw_vertices = raw_vertices, prob_isolated = 0.5)
warnings()
##~~~~~~~~~~~~~~~~~~~~~~-~~~~~~~~~~~~~~~~~~~~~~~~~---------------------------------
simulated_trade <-sim_trade_pref (raw_vertices = raw_vertices, prob_isolated = 0.5)
View(simulated_trade)
status_infected_1 <- readRDS("C:/Users/Chanc004/OneDrive - Wageningen University & Research/Phd thesis/R code/Git FMD model Thailand/status_infected_1.rds")
status_infected_2 <- readRDS("C:/Users/Chanc004/OneDrive - Wageningen University & Research/Phd thesis/R code/Git FMD model Thailand/status_infected_2.rds")
status_infectious_2 <- readRDS("C:/Users/Chanc004/OneDrive - Wageningen University & Research/Phd thesis/R code/Git FMD model Thailand/status_infectious_2.rds")
status_infectious_1 <- readRDS("C:/Users/Chanc004/OneDrive - Wageningen University & Research/Phd thesis/R code/Git FMD model Thailand/status_infectious_1.rds")
status_sus_1 <- readRDS("C:/Users/Chanc004/OneDrive - Wageningen University & Research/Phd thesis/R code/Git FMD model Thailand/status_sus_1.rds")
status_sus_2 <- readRDS("C:/Users/Chanc004/OneDrive - Wageningen University & Research/Phd thesis/R code/Git FMD model Thailand/status_sus_2.rds")
distancematrix_1 <- readRDS("C:/Users/Chanc004/OneDrive - Wageningen University & Research/Phd thesis/R code/Git FMD model Thailand/distancematrix_1.rds")
distancematrix_2 <- readRDS("C:/Users/Chanc004/OneDrive - Wageningen University & Research/Phd thesis/R code/Git FMD model Thailand/distancematrix_2.rds")
component_matrix_1 <- readRDS("C:/Users/Chanc004/OneDrive - Wageningen University & Research/Phd thesis/R code/Git FMD model Thailand/component_matrix_1.rds")
component_matrix_2 <- readRDS("C:/Users/Chanc004/OneDrive - Wageningen University & Research/Phd thesis/R code/Git FMD model Thailand/component_matrix_2.rds")
##~~~~~~~~~~~~~~~~-------------------------------------------------------
## Function for kernel estimation ------------------------------------
kernel_estimate_joint <- function( k0,r0,alpha,delta){
## for the first area
kernelmatrix_1<-(k0/(1+((distancematrix_1/r0)^alpha)))
diag( kernelmatrix_1) <- 0
component_matrix_delta_1<-component_matrix_1*delta
diag(component_matrix_delta_1) <- 0
#create blank matrix to store lambda
lamda_inf_1<-matrix(NA , ncol(status_sus_1), nrow(status_sus_1))
lamda_esc_1<-matrix(NA , ncol(status_sus_1), nrow(status_sus_1))
lamda_esc_trade_1<-matrix(NA , ncol(status_sus_1), nrow(status_sus_1))
lamda_inf_trade_1<-matrix(NA , ncol(status_sus_1), nrow(status_sus_1))
for (i in 1:ncol(status_sus_1)){
#lambda for escape
lamda_esc_1[i,] = rowSums(kernelmatrix_1*(as.matrix(status_sus_1[,i])%*% as.matrix(t(status_infectious_1[,i]))))
#lambda for infected
lamda_inf_1[i,] = rowSums(kernelmatrix_1*(as.matrix(status_infected_1[,i])%*% as.matrix(t(status_infectious_1[,i]))))
#lambda for escape trade
lamda_esc_trade_1[i,] = rowSums(component_matrix_delta_1*(as.matrix(status_sus_1[,i])%*% as.matrix(t(status_infectious_1[,i]))))
#lambda for infected trade
lamda_inf_trade_1[i,] = rowSums(component_matrix_delta_1*(as.matrix(status_infected_1[,i])%*% as.matrix(t(status_infectious_1[,i]))))
}
lamda_inf_total_1<-lamda_inf_1+lamda_inf_trade_1 # sum lambda from distance independent and distance dependent
lamda_inf_ID_1<-colSums(lamda_inf_total_1) # sum lambda infection for each farm
log_lamda_inf_ID_1<- ifelse(lamda_inf_ID_1>0,log(1-(exp(-1*lamda_inf_ID_1))),0) # if lambda =0 , not calculate prob inf
logPinf_1<-sum(log_lamda_inf_ID_1)
lamda_esc_ID_1<-colSums(lamda_esc_1)# sum force of infection from each ID
logPesc_1<-sum(lamda_esc_ID_1)
lamda_esc_trade_ID_1<-colSums(lamda_esc_trade_1)# sum force of infection from each ID
logPesc_trade_1<-sum(lamda_esc_trade_ID_1)
## for the second area
kernelmatrix_2<-(k0/(1+((distancematrix_2/r0)^alpha)))
diag( kernelmatrix_2) <- 0
component_matrix_delta_2<-component_matrix_2*delta
diag(component_matrix_delta_2) <- 0
#create blank matrix to store lambda
lamda_inf_2<-matrix(NA , ncol(status_sus_2), nrow(status_sus_2))
lamda_esc_2<-matrix(NA , ncol(status_sus_2), nrow(status_sus_2))
lamda_esc_trade_2<-matrix(NA , ncol(status_sus_2), nrow(status_sus_2))
lamda_inf_trade_2<-matrix(NA , ncol(status_sus_2), nrow(status_sus_2))
for (i in 1:ncol(status_sus_2)){
#lambda for escape
lamda_esc_2[i,] = rowSums(kernelmatrix_2*(as.matrix(status_sus_2[,i])%*% as.matrix(t(status_infectious_2[,i]))))
#lambda for infected
lamda_inf_2[i,] = rowSums(kernelmatrix_2*(as.matrix(status_infected_2[,i])%*% as.matrix(t(status_infectious_2[,i]))))
#lambda for escape trade
lamda_esc_trade_2[i,] = rowSums(component_matrix_delta_2*(as.matrix(status_sus_2[,i])%*% as.matrix(t(status_infectious_2[,i]))))
#lambda for infected trade
lamda_inf_trade_2[i,] = rowSums(component_matrix_delta_2*(as.matrix(status_infected_2[,i])%*% as.matrix(t(status_infectious_2[,i]))))
}
lamda_inf_total_2<-lamda_inf_2+lamda_inf_trade_2 # sum lambda from distance independent and distance dependent
lamda_inf_ID_2<-colSums(lamda_inf_total_2) # sum lambda infection for each farm
log_lamda_inf_ID_2<- ifelse(lamda_inf_ID_2>0,log(1-(exp(-1*lamda_inf_ID_2))),0) # if lambda =0 , not calculate prob inf
logPinf_2<-sum(log_lamda_inf_ID_2)
lamda_esc_ID_2<-colSums(lamda_esc_2)# sum force of infection from each ID
logPesc_2<-sum(lamda_esc_ID_2)
lamda_esc_trade_ID_2<-colSums(lamda_esc_trade_2)# sum force of infection from each ID
logPesc_trade_2<-sum(lamda_esc_trade_ID_2)
return((-1)*(logPinf_1-logPesc_1-logPesc_trade_1 +logPinf_2-logPesc_2-logPesc_trade_2))# * -1 to minimize loglikelihood
}
